# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import math_service_pb2 as math__service__pb2


class MathServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Sqrt = channel.unary_unary(
                '/grpc.MathService/Sqrt',
                request_serializer=math__service__pb2.IntRequest.SerializeToString,
                response_deserializer=math__service__pb2.FloatResponse.FromString,
                )
        self.Std = channel.stream_unary(
                '/grpc.MathService/Std',
                request_serializer=math__service__pb2.IntRequest.SerializeToString,
                response_deserializer=math__service__pb2.FloatResponse.FromString,
                )
        self.Factor = channel.unary_stream(
                '/grpc.MathService/Factor',
                request_serializer=math__service__pb2.IntRequest.SerializeToString,
                response_deserializer=math__service__pb2.IntResponse.FromString,
                )
        self.Max = channel.stream_stream(
                '/grpc.MathService/Max',
                request_serializer=math__service__pb2.IntRequest.SerializeToString,
                response_deserializer=math__service__pb2.IntResponse.FromString,
                )


class MathServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Sqrt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Std(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Factor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Max(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MathServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Sqrt': grpc.unary_unary_rpc_method_handler(
                    servicer.Sqrt,
                    request_deserializer=math__service__pb2.IntRequest.FromString,
                    response_serializer=math__service__pb2.FloatResponse.SerializeToString,
            ),
            'Std': grpc.stream_unary_rpc_method_handler(
                    servicer.Std,
                    request_deserializer=math__service__pb2.IntRequest.FromString,
                    response_serializer=math__service__pb2.FloatResponse.SerializeToString,
            ),
            'Factor': grpc.unary_stream_rpc_method_handler(
                    servicer.Factor,
                    request_deserializer=math__service__pb2.IntRequest.FromString,
                    response_serializer=math__service__pb2.IntResponse.SerializeToString,
            ),
            'Max': grpc.stream_stream_rpc_method_handler(
                    servicer.Max,
                    request_deserializer=math__service__pb2.IntRequest.FromString,
                    response_serializer=math__service__pb2.IntResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.MathService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MathService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Sqrt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.MathService/Sqrt',
            math__service__pb2.IntRequest.SerializeToString,
            math__service__pb2.FloatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Std(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpc.MathService/Std',
            math__service__pb2.IntRequest.SerializeToString,
            math__service__pb2.FloatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Factor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.MathService/Factor',
            math__service__pb2.IntRequest.SerializeToString,
            math__service__pb2.IntResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Max(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpc.MathService/Max',
            math__service__pb2.IntRequest.SerializeToString,
            math__service__pb2.IntResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
